#!/usr/bin/env python3

import sys
import json
import time

import qstatpretty.ttyutil.color as ttycolor
import qstatpretty.ttyutil.table as ttytable
import qstatpretty.ttyutil.shrink as ttyshrink
import qstatpretty.ttyutil.size as ttysize
import qstatpretty.parser as parser

def state_color(s):
	if "E" in s: return ttycolor.COLOR_RED
	if "T" in s: return ttycolor.COLOR_RED
	if "d" in s: return ttycolor.COLOR_BLUE
	if "t" in s: return ttycolor.COLOR_RED
	if "h" in s: return ttycolor.COLOR_MAGENTA
	if "q" in s: return ttycolor.COLOR_YELLOW
	if "r" in s: return ttycolor.COLOR_GREEN
	if "t" in s: return ttycolor.COLOR_CYAN
	return None


DATE_FORMATS = [
	('%Y-%m-%d %H:%M:%S', 20),
	('%m-%d %H:%M:%S', 18),
	('%a %H:%M:%S', 16),
	('%H:%M:%S', 10),
	('%H:%M', 5),
	('%Hh', 2),
	('%H', 1),
	('', 0)
]

def best_date_format(content, width):
	return next( df for df in DATE_FORMATS if len(content.strftime(df[0])) <= width)

def date_format(content, width):
	if not content: return ''
	return content.strftime(best_date_format(content, width)[0])

def date_value(content, width):
	if not content: return 0
	bdf = best_date_format(content, width)
	return bdf[1] 

DEFAULT_TABLE_FORMAT = [
	 {
		 'key':     'number'
		,'title':   'job-ID'
		,'color':  lambda x: None
		,'ellipsis': ttyshrink.simple_ellipsis()
		,'fval': ttyshrink.simple_value()
	 }
	,{
		 'key':     'priority'
		,'title':   'priorty'
		,'color': lambda x: None
		,'ellipsis': ttyshrink.simple_ellipsis()
		,'fval': ttyshrink.simple_value()
	 }
	,{
		 'key':     'name'
		,'title':   'name'
		,'color': lambda x: ttycolor.COLOR_BLUE
		,'ellipsis': ttyshrink.simple_ellipsis()
		,'fval': ttyshrink.simple_value()
	 }
	,{
		 'key':     'owner'
		,'title':   'user'
		,'color': lambda x: None
		,'ellipsis': ttyshrink.simple_ellipsis()
		,'fval': ttyshrink.simple_value()
	 }
	,{
		 'key':     'state'
		,'title':   'state'
		,'color': state_color
		,'ellipsis': ttyshrink.simple_ellipsis()
		,'fval': ttyshrink.simple_value()
	 }
	,{
		 'key':     't_submit'
		,'title':   't_submit'
		,'color': lambda x: None
		,'ellipsis': date_format
		,'fval': date_value
	 }
	,{
		 'key':     't_start'
		,'title':   't_start'
		,'color': lambda x: None
		,'ellipsis': date_format
		,'fval': date_value
	 }
	,{
		 'key':     'queue'
		,'title':   'queue'
		,'color': lambda x: None
		,'ellipsis': ttyshrink.simple_ellipsis()
		,'fval': ttyshrink.simple_value()
	 }
	,{
		 'key':     'slots'
		,'title':   'slots'
		,'color': lambda x: None
		,'ellipsis': ttyshrink.simple_ellipsis()
		,'fval': ttyshrink.simple_value()
	 }
	,{
		 'key':     'tasks'
		,'title':   'tasks'
		,'color': lambda x: None
		,'ellipsis': ttyshrink.simple_ellipsis()
		,'fval': ttyshrink.simple_value()
	 }
]


def empty_cols(tbl):
	if not tbl: return set()

	emptycols = set(range(len(tbl[0])))

	for row in tbl:
		fullcols = set()
		for col in emptycols:
			if row[col].strip():
				fullcols.add(col)

		for col in fullcols: emptycols.remove(col)
		if not emptycols: break

	return emptycols

def remove_cols(tbl, cols):
	return [ [ col for i, col in enumerate(row) if i not in cols] for row in tbl ]

jobs = parser.parse_xml(open("qstat_all.xml"))

def job_table(jobs, table_format=DEFAULT_TABLE_FORMAT):

	header = [ col['title'] for col in table_format ]
	body = [ [ job[col['key']] if job[col['key']] else "" for col in table_format ] for job in jobs]

	#return remove_cols([header] + body, empty_cols(body))
	return [header] + body

if jobs:
	tbl = job_table(jobs)
	tbl = ttyshrink.grow_table(tbl, ttysize.terminal_size()[0], DEFAULT_TABLE_FORMAT, ttytable.DELIMITERS_DEFAULT ) 
	print(ttytable.pretty_table(tbl, DEFAULT_TABLE_FORMAT))

if len(jobs) == 1:
	print("1 job total.")
else:
	print("{} jobs total.".format(len(jobs)))

